# Set your working directory to the folder where you have the 'data' and 'src' folders with cd("path to that folder"), check with pwd()
cd(@__DIR__)

# The first time you have to run these next two lines too: 
# import Pkg
# Pkg.add(["CSV", "DataFrames", "Roots", "Plots"])
using CSV, DataFrames, Roots, Plots, Interpolations, Metrics

include(joinpath(@__DIR__, "helper_functions.jl"))

############################################################################################################
# MODEL ANALYSIS AND EMISSIONS SCENARIO PARAMETERS TO CHANGE (will add more options as semester progresses).
############################################################################################################

    # Start and end year for the model
    start_year = 2005 # TODO:Ana 2005 value set for Assignment 3. Used to be 1850
    end_year   = 2300

    # Set RCP Scenario (current options = "rcp85").
    rcp_scenario = "rcp85"

#####################################################################################################
# READ IN MODEL INPUT DATA
#####################################################################################################

    # Read in radiative forcing and emissions data for RCP Scenario
    raw_radforc = CSV.File(normpath(@__DIR__,"..","data", (rcp_scenario * "_radiativeforcingDATA.csv")), skipto=60, header = 59) |> DataFrame # CSV file is in the `data` folder. First 59 rows are irrelevant data, start at 60. Turn that into a dataframe. => ANA:DONE
    raw_emiss   = CSV.File(normpath(@__DIR__,"..","data", (rcp_scenario * "_emissionsDATA.csv")), skipto=38, header = 37) |> DataFrame
    raw_conc    = CSV.File(normpath(@__DIR__,"..","data", (rcp_scenario * "_concentrationDATA.csv")), skipto=39, header = 38) |> DataFrame

    # Columns have headings. Rows are numbered.
    # Isolate data for the years model will be run.
    radforc = raw_radforc[(raw_radforc[!,"YEARS"].>=start_year) .& (raw_radforc[!,"YEARS"].<=end_year),:]
    emiss = raw_emiss[(raw_emiss[!,"YEARS"].>=start_year) .& (raw_emiss[!,"YEARS"].<=end_year),:]
    conc = raw_conc[(raw_conc[!,"YEARS"].>=start_year) .& (raw_conc[!,"YEARS"].<=end_year),:]

    # Subtract CO2 RF from Total Anthropogenic RF to avoid double counting.
    exogenous_rf = radforc[:,"TOTAL_INCLVOLCANIC_RF"] - radforc[:,"CO2_RF"]

    # Add fossil fuel and land use change + other sources CO2 emissions together.
    co2_emissions = emiss[:,"FossilCO2"] + emiss[:,"OtherCO2"]

    #Get N2O concentrations (used in CO2 radiative forcing calculations).
    N2O_conc = conc[:,"N2O"]


#######################################################################################################
# SET MODEL PARAMETER VALUES
########################################################################################################

    # Number of timesteps to run model.
    n_steps = length(start_year:end_year) # 451 years

    #------------------------------
    # Carbon Cycle
    #------------------------------

    # ----Parameters----#
    CO2_0   = 278.0                               # Pre-industrial atmospheric concentration of CO2.
    r0      = 32.4                                # Pre-industrial iIRF100.
    rC      = 0.019                               # Increase in iIRF100 with cumulative carbon uptake (yr/GtC).
    rT      = 4.165                               # Increase in iIRF100 with warming (yr/K).
    a       = [0.2173, 0.2240, 0.2824, 0.2763]    # Fraction of emissions entering each carbon pool (geological reabsorption[1], deep ocean invasion/equilibration[2], biospheric uptake/ocean thermocline invasion[3], rapid biospheric uptake/ocean mixed-layer invasion[4]).
    tau     = [10^6, 394.4, 36.54, 4.304]         # Decay time constants for each carbon pool in 'a'.
    ppm2gtc = 2.123                               # Conversion factor between ppm and GtC (with 1 ppm = 2.123 GtC).

    #------------------------------
    # Climate Dynamics
    #------------------------------

    # ----Parameters----#
    a1    = -2.4785e-7         # CO2 raditive forcing constant.
    b1    = 7.2e-4             # CO2 raditive forcing constant.
    c1    = -2.1e-4            # CO2 raditive forcing constant.
    N2O_0 = 270                # Pre-industrial atmospheric concentration of N2O.
    q     = [0.33, 0.41]       # q1 (thermal equilibration of deep ocean) & q2 (thermal adjustment of upper ocean) in KW-1 m2.
    d     = [239.0, 4.1]       # d1 (thermal equilibration of deep ocean) & d2 (thermal adjustment of upper ocean) in years.


#####################################################################################################
# MODEL
#####################################################################################################


function run_model(CO2_emiss)
    # Initialize dataframe to store results for each time step (each row is a year, each column is a new variable).
    # First set a variable to generate the appropriate number of missing/blank values
    filldf = fill(0.::Float64, end_year-start_year+1)
    # Create the dataframe called 'output', assign model years to a column (just for convenience)
    output = DataFrame(years = [start_year:1:end_year;], #and
    # Add columns for Carbon Cycle results, and
    alpha = filldf, R1 = filldf, R2 = filldf, R3 = filldf, R4 = filldf, CO2 = filldf, Cacc = filldf,
    # add for the Climate/Temperature results.
    temp_j1 = filldf, temp_j2 = filldf, CO2_rf = filldf, total_rf = filldf, temperature = filldf)
    
    for t in 1:n_steps
        if (t==1)
            output = initialize_model_with_conditions(output, t, CO2_emiss)
        else
            output = run_carbon_cycle(output, t, CO2_emiss)
        end
    end

    return(output)
end

function initialize_model_with_conditions(output, t, CO2_emiss)
    #----------------------------#
    #----INITIAL CARBON CYCLE----#
    #----------------------------#
    println("Initializing model with conditions.")

    # Initialise the carbon pools to be correct for first timestep in numerical method (this is not in the paper, but taken from original FAIR source code).
    output[t, "R1"] = a[1] * CO2_emiss[t] / ppm2gtc * 0.5
    output[t, "R2"] = a[2] * CO2_emiss[t] / ppm2gtc * 0.5
    output[t, "R3"] = a[3] * CO2_emiss[t] / ppm2gtc * 0.5
    output[t, "R4"] = a[4] * CO2_emiss[t] / ppm2gtc * 0.5

    # Initial state-dependent scaling factor.
    output[t,"alpha"] = 1e-10

    # Initial atmospheric CO2 concentration.
    output[t,"CO2"] = CO2_0

    # Initial carbon stock perturbation.
    output[t,"Cacc"] = CO2_emiss[t]

    #--------------------------------#
    #----INITIAL CLIMATE DYNAMICS----#
    #--------------------------------#
    output[t,"CO2_rf"] = 0.0
    output[t,"total_rf"] = 0.0

    # Initial temperature change for two reponse times.
    output[t,"temp_j1"] = 0.0
    output[t,"temp_j2"] = 0.0

    # Set initial surface temperature anomaly to 0.0.
    output[t,"temperature"] = 0.0

    return(output)
end

function run_carbon_cycle(output, t, CO2_emiss)
    if (t == 2)
        println("Running carbon cycle...")
    end
    #--------------------------------#
    #---- CARBON CYCLE EQUATIONS ----#
    #--------------------------------#
    # Equation 8 in FAIR
    iIRFT100 = r0 + rC*output[t-1,"Cacc"] + rT*output[t-1,"temperature"]

    # Set an upper bound to avoid unstable/non-physical results.  Not in paper, taken from original FAIR source code.
    if iIRFT100 >= 97.0 
        # Set alpha to it's limiting value.
        output[t,"alpha"] = 113.7930278
    else 
        # Solve for alpha, given current state of carbon and climate systems.
        # Use the previous value of alpha as initial guess because alpha varies relatively smoothly over time.
        output[t,"alpha"] = find_alpha(iIRFT100, a, tau, output[t-1,"alpha"])
    end

    #Calculate updated carbon cycle time constants and CO2 concentrations in 4 carbon pools.
    # Four carbon pols are sufficient to represent the response of atmospheric CO2 concentration anomalies following a pulse of emission of 100 GtC
    # (Annual C02 emissions)*(fraction of carbon emissions entering each reservoir) - Ri/(decay time constant for pool)
    for i in 1:4
        output[t, "R"*string(i)] = output[t-1, "R"*string(i)] * exp((-1.0/(tau[i]* output[t,"alpha"]))) + 0.5 * a[i] * (CO2_emiss[t] + CO2_emiss[t-1]) / ppm2gtc
    end

    # Calculate the change in CO2 concentrations across all pools and the current atmospheric concentration.
    sum_of_pools = output[t, "R1"] + output[t, "R2"] + output[t, "R3"] + output[t, "R4"]
    output[t,"CO2"] = CO2_0 + sum_of_pools

    # Calculate accumulated perturbation of carbon stock.
    output[t,"Cacc"] = output[t-1,"Cacc"] + CO2_emiss[t] - (output[t,"CO2"] - output[t-1,"CO2"]) * ppm2gtc
    
    #------------------------------------#
    #---- CLIMATE DYNAMICS EQUATIONS ----#
    #------------------------------------#
    # Calculate N_hat term and difference in CO2 concentrations as temporary variables (for convenience).
    N_hat = 0.5 * (N2O_conc[t] + N2O_0)
    CO2_diff = output[t,"CO2"] - CO2_0

    # Calculate CO2 radiative forcing.
    output[t,"CO2_rf"] = (a1*(CO2_diff)^2 + b1*abs(CO2_diff) + c1*N_hat + 5.36) * log(output[t,"CO2"] / CO2_0)

    # Calculate total radiative forcing.
    output[t,"total_rf"] = output[t,"CO2_rf"] + exogenous_rf[t]

    # Calculate temperature change for the two different thermal response times.
    output[t,"temp_j1"] = output[t-1,"temp_j1"] * exp((-1.0)/d[1]) + 0.5 * q[1] * (output[t-1,"total_rf"] + output[t,"total_rf"]) * (1 - exp((-1.0)/d[1]))
    output[t,"temp_j2"] = output[t-1,"temp_j2"] * exp((-1.0)/d[2]) + 0.5 * q[2] * (output[t-1,"total_rf"] + output[t,"total_rf"]) * (1 - exp((-1.0)/d[2]))

    #Calculate global mean surface temperature anomaly
    output[t,"temperature"] = output[t,"temp_j1"] + output[t,"temp_j2"]

    return(output)
end

function base_case()
    println("Running base case:")
    results = run_model(co2_emissions) # Run model with argument 'co2_emissions,' a vector of total CO2 emissions (GtCO2).
    
    println("Plotting plot |_")
    plot(
        results[:,"years"], 
        results[:,"temperature"],  
        title = "Global avg temperature change from pre-industrial", 
        label = "temp change from rcp85 model", 
        xlab="year", 
        ylab="degrees C",
        linewidth=1
    )
    savefig("../data/base_case.png")

    println("Done! \n")

    return(results)
end

function setup_shared_socioeconomic_pathways(ssp_scenario)
    # Read in Shared Socioeconomic Pathways Data
    raw_ssp = CSV.File(normpath(@__DIR__,"..","data", "SSP_IAM_V2_201811.csv"), delim=",", header=1) |> DataFrame

    baseline = filter(row -> (row.MODEL == "REMIND-MAGPIE") & (row.SCENARIO == ssp_scenario*"-Baseline") & (row.REGION == "World"), raw_ssp)

    # Extract row data into data frames
    energy = filter(row -> (row.VARIABLE == "Final Energy"), baseline)[:,6:16] # EJ/year
    population = filter(row -> (row.VARIABLE == "Population"), baseline)[:,6:16] # millions
    gdp = filter(row -> (row.VARIABLE == "GDP|PPP"), baseline)[:,6:16] # Billion $ USD for 2005$
    emissions = filter(row -> (row.VARIABLE == "Emissions|CO2"), baseline)[:,6:16] # Mt CO2/yr

    # Convert data frames into vector
    energy_vector = collect(skipmissing(energy[1, :]))
    population_vector = collect(skipmissing(population[1, :]))
    gdp_vector = collect(skipmissing(gdp[1, :]))
    emissions_vector = collect(skipmissing(emissions[1, :]))

    year_ints = [2005, 2010, 2020, 2030, 2040, 2050, 2060, 2070, 2080, 2090, 2100]

    energy_interpolator = extrapolate(interpolate(year_ints, energy_vector, Interpolations.FritschCarlsonMonotonicInterpolation()), Line())
    population_interpolator = extrapolate(interpolate(year_ints, population_vector, Interpolations.FritschCarlsonMonotonicInterpolation()), ((Flat(), Line())))
    gdp_interpolator = extrapolate(interpolate(year_ints, gdp_vector, Interpolations.FritschCarlsonMonotonicInterpolation()), Line())
    emissions_interpolator = extrapolate(interpolate(year_ints, emissions_vector, Interpolations.FritschCarlsonMonotonicInterpolation()), Line())

    # Create vector of years between 2005 and 2300 step size 1
    years_all = [2005:1:2300;]
    interpolated_energy = energy_interpolator.(years_all)
    interpolated_population = population_interpolator.(years_all)
    interpolated_gdp = gdp_interpolator.(years_all)
    interpolated_emissions = emissions_interpolator.(years_all)

    # Convert emissions to Gt Cacc
    interpolated_emissions = interpolated_emissions * 0.001 * 12 / 44

    interpolated_emissions
end

function run_shared_socioeconomic_pathways(emissions)
    println("Running shared socioeconomic pathways:")

    run_model(emissions)
end

# base_case()

ssp5_emissions = setup_shared_socioeconomic_pathways("SSP5")
run_shared_socioeconomic_pathways(ssp5_emissions)


